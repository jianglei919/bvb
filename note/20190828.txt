1、Spring注解@Resource和@Autowired区别对比

@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。

共同点：
两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。

不同点：
@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。
@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：

@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。
@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。
如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。


注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。

@Resource装配顺序：
①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。
②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。
③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。
④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。
@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。


推荐使用@Service@Repository@Controller 代替@Component(额外提一下，生成id的规则：注解指定，以注解为准；没有则是类名首字母小写，但如果类名是两个及以上的大写字母开头，那就是类名，不做其他处理)

public class Introspector {

/**
 * Utility method to take a string and convert it to normal Java variable
 * name capitalization.  This normally means converting the first
 * character from upper case to lower case, but in the (unusual) special
 * case when there is more than one character and both the first and
 * second characters are upper case, we leave it alone.
 * <p>
 * Thus "FooBah" becomes "fooBah" and "X" becomes "x", but "URL" stays
 * as "URL".
 *
 * @param  name The string to be decapitalized.
 * @return  The decapitalized version of the string.
 *大致意思就是上面我说的那个规则
 */
    public static String decapitalize(String name) {
        if (name == null || name.length() == 0) {
            return name;
        }
        //开头前两个字母是大写，直接返回类名
        if (name.length() > 1 && Character.isUpperCase(name.charAt(1)) &&
                    Character.isUpperCase(name.charAt(0))){
            return name;
        }
        char chars[] = name.toCharArray();
        //否则将首字母小写
        chars[0] = Character.toLowerCase(chars[0]);
        return new String(chars);
    }
}



2、spring上下文

1、当Web应用启动时，contextInitialized方法会执行载入根上下文（IOC容器）
https://blog.csdn.net/and1kaney/article/details/51214193

ContextLoaderListener.contextInitialized(ServletContextEvent event)


->ContextLoader.initWebApplicationContext(ServletContext servletContext)


->ContextLoader.createWebApplicationContext(ServletContext sc) - - - - - 如果web.xml里没指定类型，默认是XmlWebAppalication


->ContextLoader.configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc)  - - - - - -  配置和初始化 webApplicationContext


->ConfigurableWebApplicationContext.refresh() - - - - -  ConfigurableWebApplicationContext是接口


->AbstractApplicationContext.refresh() - - - - - 启动 容器初始化


->AbstractApplicationContext.obtainFreshBeanFactory() - - - - -  创建BeanFactory，开始容器的初始化过程，比如BeanDefinition的载入


->AbstractRefreshableApplicationContext.refreshBeanFactory() - - - - - 在这里创建了BeanFactory（DefaultListableBeanFactory）。然后开始loadBeanDefinitions，这是一个抽象方法，实际的载入是在XmlWebApplicationContext类里。


->XmlWebApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory beanFactory) - - - -创建一个XmlBeanDefinitionReader，并启动bean定义信息的载入。


->XmlWebApplicationContext.loadBeanDefinitions(XmlBeanDefinitionReader reader) - - - 根据配置文件的locations，因为配置文件是xml的，所以使用的是XmlBeanDefinitionReader 。具体的载入过程是委托给BeanDefinitionReader完成的

->AbstractBeanDefinitionReader.loadBeanDefinitionReader - - - 这是一个抽象类，实际的载入是在XmlBeanDefinitionReader中实现的，抽象类是根据bean定义的xml配置文件的路径，生成resource。然后XmlBeanDefinitionReader根据resource开始具体载入BeanDefinition


->XmlBeanDefinitionReader.loadBeanDefinitionReader(Resource resource)

->XmlBeanDefinitionReader.loadBeanDefinitions(EncodedResource encodedResource) - - - 在读取器中，需要得到代表XML文件的resource，这个resource对象封装了对xml文件的IO操作，所以读取器可以在打开IO流后得到XML的文件对象。

->XmlBeanDefinitionReader.doLoadBeanDefinitions(InputSource inputSource, Resource resource) - - - -读取器在这里打开IO流后得到XML的文件Document对象（Document对象是通过XML解析器出来的，下面会再根据Spring Bean的规则再解析出BeanDefinition）。得到对象后就可以按照spring的Bean定义规则来对这个xml的文件档树进行解析了

->XmlBeanDefinitionReader.registerBeanDefinitions(Document doc, Resource resource) - - -这个方法启动对BeanDefinition的解析的详细过程，这个解析会使用到Spring的Bean的配置规则。具体的过程是有BeanDefinitionDocumentReader来完成的。
->BeanDefinitionDocumentReader.registerBeanDefinitions(Document doc, XmlReaderContext readerContext)

->DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(Document doc, XmlReaderContext readerContext) - - - - -DefaultBeanDefinitionDocumentReader 是BeanDefinitionDocumentReader的实现类，registerBeanDefinitions方法开始按照Spring Bean的规则解析Document对象

->DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(Element root) - - -解析过程是由BeanDefinitionParserDelegate对象来完成的。


->DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)
->DefaultBeanDefinitionDocumentReader.parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate)
->DefaultBeanDefinitionDocumentReader.processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate)
 - - - - 解析的结果是由BeanDefinitionHolder来持有的，这个BeanDefinitionHolder对象封装了BeanDefinition，beanName，aliases等信息，用它来完成向IOC容器注册。


->BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele)
->BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, BeanDefinition containingBean)
->BeanDefinitionParserDelegate.parseBeanDefinitionElement(
               Element ele, String beanName, BeanDefinition containingBean) - - - 对xml配置文件中的配置的Bean进行详细解析，这里只是读取定义 的<bean>，并载入到BeanDefinition中去，这里不涉及对象的实例化过程，对象的实例化实际上是再依赖注入时完成的。